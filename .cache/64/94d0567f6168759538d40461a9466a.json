{"id":"p/YC","dependencies":[{"name":"/home/s/repos/tree-shaking-example/package.json","includedInParent":true,"mtime":1539681810771},{"name":"/home/s/repos/tree-shaking-example/node_modules/ramda/package.json","includedInParent":true,"mtime":1539525658998},{"name":"./pipeP","loc":{"line":1,"column":18},"parent":"/home/s/repos/tree-shaking-example/node_modules/ramda/es/composeP.js","resolved":"/home/s/repos/tree-shaking-example/node_modules/ramda/es/pipeP.js"},{"name":"./reverse","loc":{"line":2,"column":20},"parent":"/home/s/repos/tree-shaking-example/node_modules/ramda/es/composeP.js","resolved":"/home/s/repos/tree-shaking-example/node_modules/ramda/es/reverse.js"}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.default=u;var e=t(require(\"./pipeP\")),r=t(require(\"./reverse\"));function t(e){return e&&e.__esModule?e:{default:e}}function u(){if(0===arguments.length)throw new Error(\"composeP requires at least one argument\");return e.default.apply(this,(0,r.default)(arguments))}","map":{"mappings":[{"source":"../node_modules/ramda/es/composeP.js","original":{"line":43,"column":1},"generated":{"line":1,"column":0}},{"source":"../node_modules/ramda/es/composeP.js","original":{"line":43,"column":1},"generated":{"line":1,"column":13}},{"source":"../node_modules/ramda/es/composeP.js","original":{"line":43,"column":1},"generated":{"line":1,"column":20}},{"source":"../node_modules/ramda/es/composeP.js","original":{"line":43,"column":1},"generated":{"line":1,"column":35}},{"source":"../node_modules/ramda/es/composeP.js","original":{"line":43,"column":1},"generated":{"line":1,"column":43}},{"source":"../node_modules/ramda/es/composeP.js","original":{"line":43,"column":1},"generated":{"line":1,"column":56}},{"source":"../node_modules/ramda/es/composeP.js","original":{"line":43,"column":1},"generated":{"line":1,"column":57}},{"source":"../node_modules/ramda/es/composeP.js","original":{"line":43,"column":1},"generated":{"line":1,"column":64}},{"source":"../node_modules/ramda/es/composeP.js","original":{"line":43,"column":1},"generated":{"line":1,"column":68}},{"source":"../node_modules/ramda/es/composeP.js","original":{"line":43,"column":1},"generated":{"line":1,"column":76}},{"source":"../node_modules/ramda/es/composeP.js","original":{"line":43,"column":1},"generated":{"line":1,"column":84}},{"source":"../node_modules/ramda/es/composeP.js","original":{"line":1,"column":0},"generated":{"line":1,"column":86}},{"source":"../node_modules/ramda/es/composeP.js","original":{"line":1,"column":0},"generated":{"line":1,"column":90}},{"source":"../node_modules/ramda/es/composeP.js","original":{"line":1,"column":0},"generated":{"line":1,"column":92}},{"source":"../node_modules/ramda/es/composeP.js","original":{"line":1,"column":0},"generated":{"line":1,"column":94}},{"source":"../node_modules/ramda/es/composeP.js","original":{"line":1,"column":0},"generated":{"line":1,"column":102}},{"source":"../node_modules/ramda/es/composeP.js","original":{"line":2,"column":0},"generated":{"line":1,"column":114}},{"source":"../node_modules/ramda/es/composeP.js","original":{"line":2,"column":0},"generated":{"line":1,"column":116}},{"source":"../node_modules/ramda/es/composeP.js","original":{"line":2,"column":0},"generated":{"line":1,"column":118}},{"source":"../node_modules/ramda/es/composeP.js","original":{"line":2,"column":0},"generated":{"line":1,"column":126}},{"source":"../node_modules/ramda/es/composeP.js","original":{"line":43,"column":1},"generated":{"line":1,"column":140}},{"source":"../node_modules/ramda/es/composeP.js","original":{"line":43,"column":1},"generated":{"line":1,"column":149}},{"source":"../node_modules/ramda/es/composeP.js","original":{"line":43,"column":1},"generated":{"line":1,"column":151}},{"source":"../node_modules/ramda/es/composeP.js","original":{"line":43,"column":1},"generated":{"line":1,"column":154}},{"source":"../node_modules/ramda/es/composeP.js","original":{"line":43,"column":1},"generated":{"line":1,"column":161}},{"source":"../node_modules/ramda/es/composeP.js","original":{"line":43,"column":1},"generated":{"line":1,"column":164}},{"source":"../node_modules/ramda/es/composeP.js","original":{"line":43,"column":1},"generated":{"line":1,"column":166}},{"source":"../node_modules/ramda/es/composeP.js","original":{"line":43,"column":1},"generated":{"line":1,"column":177}},{"source":"../node_modules/ramda/es/composeP.js","original":{"line":43,"column":1},"generated":{"line":1,"column":179}},{"source":"../node_modules/ramda/es/composeP.js","original":{"line":43,"column":1},"generated":{"line":1,"column":180}},{"source":"../node_modules/ramda/es/composeP.js","original":{"line":43,"column":1},"generated":{"line":1,"column":188}},{"source":"../node_modules/ramda/es/composeP.js","original":{"line":38,"column":15},"generated":{"line":1,"column":191}},{"source":"../node_modules/ramda/es/composeP.js","name":"composeP","original":{"line":38,"column":24},"generated":{"line":1,"column":200}},{"source":"../node_modules/ramda/es/composeP.js","name":"arguments","original":{"line":39,"column":6},"generated":{"line":1,"column":204}},{"source":"../node_modules/ramda/es/composeP.js","original":{"line":39,"column":27},"generated":{"line":1,"column":207}},{"source":"../node_modules/ramda/es/composeP.js","name":"arguments","original":{"line":39,"column":6},"generated":{"line":1,"column":211}},{"source":"../node_modules/ramda/es/composeP.js","name":"length","original":{"line":39,"column":16},"generated":{"line":1,"column":221}},{"source":"../node_modules/ramda/es/composeP.js","original":{"line":40,"column":10},"generated":{"line":1,"column":228}},{"source":"../node_modules/ramda/es/composeP.js","original":{"line":40,"column":10},"generated":{"line":1,"column":234}},{"source":"../node_modules/ramda/es/composeP.js","name":"Error","original":{"line":40,"column":14},"generated":{"line":1,"column":238}},{"source":"../node_modules/ramda/es/composeP.js","original":{"line":40,"column":20},"generated":{"line":1,"column":244}},{"source":"../node_modules/ramda/es/composeP.js","name":"pipeP","original":{"line":42,"column":9},"generated":{"line":1,"column":287}},{"source":"../node_modules/ramda/es/composeP.js","name":"pipeP","original":{"line":42,"column":9},"generated":{"line":1,"column":294}},{"source":"../node_modules/ramda/es/composeP.js","name":"apply","original":{"line":42,"column":15},"generated":{"line":1,"column":296}},{"source":"../node_modules/ramda/es/composeP.js","name":"apply","original":{"line":42,"column":15},"generated":{"line":1,"column":304}},{"source":"../node_modules/ramda/es/composeP.js","original":{"line":42,"column":21},"generated":{"line":1,"column":310}},{"source":"../node_modules/ramda/es/composeP.js","original":{"line":42,"column":27},"generated":{"line":1,"column":316}},{"source":"../node_modules/ramda/es/composeP.js","name":"arguments","original":{"line":42,"column":35},"generated":{"line":1,"column":318}},{"source":"../node_modules/ramda/es/composeP.js","name":"arguments","original":{"line":42,"column":35},"generated":{"line":1,"column":320}},{"source":"../node_modules/ramda/es/composeP.js","name":"arguments","original":{"line":42,"column":35},"generated":{"line":1,"column":329}}],"sources":{"../node_modules/ramda/es/composeP.js":"import pipeP from './pipeP';\nimport reverse from './reverse';\n\n/**\n * Performs right-to-left composition of one or more Promise-returning\n * functions. The rightmost function may have any arity; the remaining\n * functions must be unary.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category Function\n * @sig ((y -> Promise z), (x -> Promise y), ..., (a -> Promise b)) -> (a -> Promise z)\n * @param {...Function} functions The functions to compose\n * @return {Function}\n * @see R.pipeP\n * @example\n *\n *      var db = {\n *        users: {\n *          JOE: {\n *            name: 'Joe',\n *            followers: ['STEVE', 'SUZY']\n *          }\n *        }\n *      }\n *\n *      // We'll pretend to do a db lookup which returns a promise\n *      var lookupUser = (userId) => Promise.resolve(db.users[userId])\n *      var lookupFollowers = (user) => Promise.resolve(user.followers)\n *      lookupUser('JOE').then(lookupFollowers)\n *\n *      //  followersForUser :: String -> Promise [UserId]\n *      var followersForUser = R.composeP(lookupFollowers, lookupUser);\n *      followersForUser('JOE').then(followers => console.log('Followers:', followers))\n *      // Followers: [\"STEVE\",\"SUZY\"]\n */\nexport default function composeP() {\n  if (arguments.length === 0) {\n    throw new Error('composeP requires at least one argument');\n  }\n  return pipeP.apply(this, reverse(arguments));\n}"},"lineCount":null}},"hash":"2194664db0636650a6d5d181adb9dfd2","cacheData":{"env":{}}}